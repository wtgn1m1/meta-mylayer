From 3a546dd1d97b544eefedb16a8618b872bcf1790d Mon Sep 17 00:00:00 2001
From: wangtg <sw_wtg@unitree.com>
Date: Thu, 19 Dec 2024 06:56:52 +0000
Subject: [PATCH] unitree: m117b okay

---
 .../boot/dts/qcom/sa8775p-addons-ride.dts     |   9 +
 arch/arm64/boot/dts/qcom/sa8775p-ride.dts     |  15 ++
 drivers/iio/temperature/Makefile              |   1 +
 drivers/iio/temperature/m117b.c               | 220 ++++++++++++++++++
 4 files changed, 245 insertions(+)
 create mode 100644 drivers/iio/temperature/m117b.c

diff --git a/arch/arm64/boot/dts/qcom/sa8775p-addons-ride.dts b/arch/arm64/boot/dts/qcom/sa8775p-addons-ride.dts
index 28c1eb9688b7..b6ec646d584b 100644
--- a/arch/arm64/boot/dts/qcom/sa8775p-addons-ride.dts
+++ b/arch/arm64/boot/dts/qcom/sa8775p-addons-ride.dts
@@ -257,6 +257,15 @@ es7210: es7210@40 {
 	};
 };
 
+&i2c19 {
+	m117b: m117b@45 {
+		compatible ="sentech,m117b";
+		reg =<0x45>;
+		status ="okay";
+	};
+};
+
+
 &lpass_tlmm {
 	lpass_i2s1_clk: i2s1-clk-state {
 			pins = "gpio6";
diff --git a/arch/arm64/boot/dts/qcom/sa8775p-ride.dts b/arch/arm64/boot/dts/qcom/sa8775p-ride.dts
index ed0c471ab78e..5f68033c1ef1 100644
--- a/arch/arm64/boot/dts/qcom/sa8775p-ride.dts
+++ b/arch/arm64/boot/dts/qcom/sa8775p-ride.dts
@@ -23,6 +23,7 @@ aliases {
 		ethernet1 = &ethernet1;
 		i2c7 = &i2c7;
 		i2c18 = &i2c18;
+		i2c19 = &i2c19;
 		serial0 = &uart10;
 		serial1 = &uart12;
 		serial2 = &uart17;
@@ -523,6 +524,13 @@ &i2c18 {
 	status = "okay";
 };
 
+&i2c19 {
+	clock-frequency = <100000>;
+	pinctrl-0 = <&qup_i2c19_default>;
+	pinctrl-names = "default";
+	status = "okay";
+};
+
 &mdss0 {
 	status = "okay";
 };
@@ -692,6 +700,13 @@ qup_i2c18_default: qup-i2c18-state {
 		bias-pull-up;
 	};
 
+	qup_i2c19_default: qup-i2c19-state {
+		pins = "gpio99", "gpio100";
+		function = "qup2_se5";
+		drive-strength = <2>;
+		bias-pull-up;
+	};
+
 	qup_uart12_default: qup-uart12-state {
 		qup_uart12_cts: qup-uart12-cts-pins {
 			pins = "gpio52";
diff --git a/drivers/iio/temperature/Makefile b/drivers/iio/temperature/Makefile
index dfec8c6d3019..408f8753f7c3 100644
--- a/drivers/iio/temperature/Makefile
+++ b/drivers/iio/temperature/Makefile
@@ -17,3 +17,4 @@ obj-$(CONFIG_TMP007) += tmp007.o
 obj-$(CONFIG_TMP117) += tmp117.o
 obj-$(CONFIG_TSYS01) += tsys01.o
 obj-$(CONFIG_TSYS02D) += tsys02d.o
+obj-y += m117b.o
diff --git a/drivers/iio/temperature/m117b.c b/drivers/iio/temperature/m117b.c
new file mode 100644
index 000000000000..be1ecf0e677e
--- /dev/null
+++ b/drivers/iio/temperature/m117b.c
@@ -0,0 +1,220 @@
+// SPDX-License-Identifier: GPL-2.0-only
+/*
+ * Digital temperature sensor with integrated Non-volatile memory
+ * Copyright (c) 2021 Puranjay Mohan <puranjay12@gmail.com>
+ *
+ * Driver for the Texas Instruments TMP117 Temperature Sensor
+ * (7-bit I2C slave address (0x48 - 0x4B), changeable via ADD pins)
+ *
+ * Note: This driver assumes that the sensor has been calibrated beforehand.
+ */
+
+#include <linux/err.h>
+#include <linux/i2c.h>
+#include <linux/delay.h>
+#include <linux/module.h>
+#include <linux/bitops.h>
+#include <linux/types.h>
+#include <linux/kernel.h>
+#include <linux/limits.h>
+#include <linux/property.h>
+
+#include <linux/iio/iio.h>
+
+#define M117B_CONVERT_T         0xCC44
+
+struct m117b_data {
+	struct i2c_client *client;
+	s16 calibbias;
+	s16 scale;
+};
+
+
+static uint8_t m117b_calc_crc8(uint8_t *message, uint8_t Num)
+{
+    uint8_t i;
+    uint8_t byte;
+    uint8_t crc = 0xFF;
+    for (byte = 0; byte < Num; byte++)
+    {
+        crc ^= (message[byte]);
+        for (i = 8; i > 0; --i)
+        {
+            if (crc & 0x80)
+                crc = (crc << 1) ^ 0x31;
+            else
+                crc = (crc << 1);
+        }
+    }
+    return crc;
+}
+
+/*
+ * Register access helpers
+ *
+ * Read a 16-bit i2c register.  The value is returned in 'val'.
+ * Returns zero if successful, or non-zero otherwise.
+ */
+static int m117b_i2c_read_reg(struct i2c_client *client, u16 reg, u32 *val)
+{
+	int r;
+	struct i2c_msg msg;
+	unsigned char data[4];
+
+	if (!client->adapter)
+		return -ENODEV;
+
+	msg.addr = client->addr;
+	msg.flags = 0;
+	msg.len = 2;
+	msg.buf = data;
+
+	/* high byte goes out first */
+	data[0] = (u8) (reg >> 8);
+	data[1] = (u8) (reg & 0xff);
+	r = i2c_transfer(client->adapter, &msg, 1);
+	if (r < 0)
+		goto err;
+
+    /* wait data */
+    usleep_range(1000000, 5000000);
+
+	msg.len = 3;
+	msg.flags = I2C_M_RD;
+	r = i2c_transfer(client->adapter, &msg, 1);
+	if (r < 0)
+		goto err;
+
+	*val = 0;
+	
+	/* crc calibration */
+    if (data[2] != m117b_calc_crc8(data, 2)) {
+		r = -1;
+		goto err;
+    }
+
+    *val = (data[0] << 8) + data[1];
+	// dev_err(&client->dev, "%s data0:%x data1:%x val:%d\r\n",__func__, data[0], data[1], *val);
+	return 0;
+
+err:
+	dev_err(&client->dev, "read from offset 0x%x error %d\n", reg, r);
+
+	return r;
+}
+
+
+static int m117b_read_raw(struct iio_dev *indio_dev,
+			   struct iio_chan_spec const *channel, int *val,
+			   int *val2, long mask)
+{
+	struct m117b_data *data = iio_priv(indio_dev);
+	s16 val_tmp;
+	s32 ret;
+
+	switch (mask) {
+	case IIO_CHAN_INFO_RAW:
+		ret = m117b_i2c_read_reg(data->client, M117B_CONVERT_T, val);
+		if (ret < 0)
+			return ret;
+		val_tmp = (s16)*val;
+		*val = val_tmp;
+		// dev_err(&data->client->dev, "%s val_tmp:%d val:%d\r\n",__func__, val_tmp, *val);
+		return IIO_VAL_INT;
+
+	case IIO_CHAN_INFO_CALIBBIAS:
+		*val = data->calibbias;
+		return IIO_VAL_INT;
+
+	case IIO_CHAN_INFO_SCALE:
+		*val = data->scale;
+		return IIO_VAL_INT;
+
+	default:
+		return -EINVAL;
+	}
+}
+
+static int m117b_write_raw(struct iio_dev *indio_dev, struct iio_chan_spec
+			    const *channel, int val, int val2, long mask)
+{
+	struct m117b_data *data = iio_priv(indio_dev);
+
+	switch (mask) {
+	case IIO_CHAN_INFO_CALIBBIAS:
+		return data->calibbias;
+
+	default:
+		return -EINVAL;
+	}
+}
+
+static const struct iio_chan_spec m117b_channels[] = {
+	{
+		.type = IIO_TEMP,
+		.info_mask_separate = BIT(IIO_CHAN_INFO_RAW) |
+				      BIT(IIO_CHAN_INFO_CALIBBIAS) |
+				      BIT(IIO_CHAN_INFO_SCALE),
+	},
+};
+
+static const struct iio_info m117b_info = {
+	.read_raw = m117b_read_raw,
+	.write_raw = m117b_write_raw,
+};
+
+static int m117b_probe(struct i2c_client *client)
+{
+	struct m117b_data *data;
+	struct iio_dev *indio_dev;
+	// int ret, val;
+
+	if (!i2c_check_functionality(client->adapter, I2C_FUNC_SMBUS_WORD_DATA))
+		return -EOPNOTSUPP;
+
+	// ret = m117b_i2c_read_reg(client, M117B_CONVERT_T, &val);
+	// dev_err(&client->dev, "unitree___________m117b_i2c_read_reg val:%d\r\n", val);
+
+	indio_dev = devm_iio_device_alloc(&client->dev, sizeof(*data));
+	if (!indio_dev)
+		return -ENOMEM;
+
+	data = iio_priv(indio_dev);
+	data->client = client;
+	data->calibbias = 40;
+	data->scale = 256;
+
+	indio_dev->modes = INDIO_DIRECT_MODE;
+	indio_dev->info = &m117b_info;
+	indio_dev->channels = m117b_channels;
+	indio_dev->num_channels = ARRAY_SIZE(m117b_channels);
+	indio_dev->name = "m117b";
+
+	return devm_iio_device_register(&client->dev, indio_dev);
+}
+
+static const struct of_device_id m117b_of_match[] = {
+    { .compatible = "sentech,m117b"},
+	{ }
+};
+MODULE_DEVICE_TABLE(of, m117b_of_match);
+
+static const struct i2c_device_id m117b_id[] = {
+    { "m117b"},
+	{ }
+};
+MODULE_DEVICE_TABLE(i2c, m117b_id);
+
+static struct i2c_driver m117b_driver = {
+	.driver = {
+		.name	= "m117b",
+		.of_match_table = m117b_of_match,
+	},
+	.probe		= m117b_probe,
+	.id_table	= m117b_id,
+};
+module_i2c_driver(m117b_driver);
+
+MODULE_AUTHOR("wangtg <wtg_sw@unitree.com>");
+MODULE_DESCRIPTION("sentech M117b Temperature sensor driver");
+MODULE_LICENSE("GPL");
